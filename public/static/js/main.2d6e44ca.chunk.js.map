{"version":3,"sources":["context/UserContext.jsx","components/Header.jsx","URL.ENDPOINT.js","socket/Socket.jsx","components/SignIn.jsx","components/Canvas.jsx","components/Main.jsx","components/ModePick.jsx","components/EndGame.jsx","components/WordChoose.jsx","App.jsx","index.js"],"names":["UserContext","createContext","require","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","gameStatus","classes","nickName","useContext","className","AppBar","color","position","Toolbar","Typography","variant","URL_ENDPOINT","socket","io","paper","marginTop","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","submit","margin","SignIn","history","useHistory","setFullName","setNickName","role","useState","nick","setNick","name","setName","Container","component","maxWidth","CssBaseline","Avatar","TextField","fullWidth","id","label","placeholder","autoComplete","onChange","e","target","value","autoFocus","InputProps","startAdornment","InputAdornment","Button","type","disabled","onClick","emit","push","Box","mt","align","Canvas","changeWord","setChangeWord","canvasRef","useRef","contextRef","isDrawing","setIsDrawing","setColor","open","setOpen","useWindowSize","winWidth","winHeight","useEffect","canvas","current","height","context","getContext","scale","lineCap","lineWidth","on","x","y","beginPath","moveTo","data","lineTo","strokeStyle","hex","stroke","closePath","clearRect","startDrawing","rect","getBoundingClientRect","touch","touches","clientX","clientY","draw","finishDrawing","style","marginBottom","onMouseDown","onMouseUp","onMouseMove","onTouchStart","onTouchEnd","onTouchMove","ref","startIcon","Tooltip","PopperProps","disablePortal","onClose","disableFocusListener","disableHoverListener","disableTouchListener","Main","setWord","setScore","word","words","modePicked","mode","score","guess","setGuess","secondUser","setSecondUser","scoreMap","easy","normal","hard","numberIndex","findIndex","currWord","ind","length","nextWord","toLocaleLowerCase","prevState","off","user2","fontSize","paragraph","ModePick","setModePicked","setWords","setMode","a","fetch","res","json","size","EndGame","WordChoose","justifyContent","gap","map","handleClick","App","createMuiTheme","primary","blue","orange","setRole","setGameStatus","fullName","Provider","ThemeProvider","to","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d6e44ca.chunk.js","sourcesContent":["const { createContext } = require(\"react\");\nexport const UserContext = createContext();","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { UserContext } from '../context/UserContext';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function Header({ gameStatus }) {\n\n    const classes = useStyles();\n    const { nickName } = useContext(UserContext)\n    return (\n        <div className={classes.root + \"header\"}>\n            <AppBar color=\"secondary\" position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Draw & Guess\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {gameStatus ? `Hello ${nickName}` : \"\"}\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};","export const URL_ENDPOINT = \"http://localhost:4000\"","import io from 'socket.io-client'\nimport {URL_ENDPOINT} from '../URL.ENDPOINT'\nexport const socket = io(URL_ENDPOINT);\n","import React, { useContext, useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { useHistory } from 'react-router-dom';\nimport { UserContext } from '../context/UserContext';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport { socket } from '../socket/Socket';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst SignIn = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  const { setFullName, setNickName, role } = useContext(UserContext);\n  const [nick, setNick] = useState('');\n  const [name, setName] = useState('');\n  const handleClick = () => {\n    setNickName(nick);\n    setFullName(name);\n    socket.emit('signed');\n    if (role === 'draw') {\n      history.push('/mode');\n    } else {\n      history.push('/main');\n    }\n  };\n\n  return (\n    <div className='landingPage'>\n      <Container component='main' maxWidth='xs'>\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component='h1' variant='h5'>\n            Sign in\n          </Typography>\n          <TextField\n            variant='outlined'\n            margin='normal'\n            fullWidth\n            id='fullname'\n            label='Full Name'\n            name='fullName'\n            placeholder='Full Name'\n            autoComplete='fullname'\n            onChange={(e) => setName(e.target.value)}\n            value={name}\n            autoFocus\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position='start'>\n                  <AccountCircle />\n                </InputAdornment>\n              ),\n            }}\n          />\n          <TextField\n            variant='outlined'\n            margin='normal'\n            fullWidth\n            name='nickname'\n            label='Nick Name'\n            placeholder='Nick Name'\n            id='nickname'\n            onChange={(e) => setNick(e.target.value)}\n            value={nick}\n            autoComplete='nickname'\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position='start'>\n                  <AccountCircle />\n                </InputAdornment>\n              ),\n            }}\n          />\n          <Button\n            type='submit'\n            fullWidth\n            variant='contained'\n            color='primary'\n            disabled={nick && name ? false : true}\n            className={classes.submit}\n            onClick={(e) => handleClick(e)}\n          >\n            Lets Play !\n          </Button>\n        </div>\n        <Box mt={8}>\n          <Typography variant='body2' color='textSecondary' align='center'>\n            Draw & Guess - Tomer Revah for Moveo exam\n          </Typography>\n        </Box>\n      </Container>\n    </div>\n  );\n};\nexport default SignIn;\n","import { Button } from '@material-ui/core';\nimport React, { useRef, useEffect, useState, useContext } from 'react';\nimport { TwitterPicker } from 'react-color';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useWindowSize } from '@react-hook/window-size';\nimport { UserContext } from '../context/UserContext';\nimport { socket } from '../socket/Socket';\nimport { useHistory } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\n\nconst Canvas = ({ changeWord, setChangeWord }) => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [color, setColor] = useState('black');\n  const [open, setOpen] = useState(false);\n  const [winWidth, winHeight] = useWindowSize();\n  const { role } = useContext(UserContext);\n  const history = useHistory();\n  const canvasHeightRatio = 0.6;\n  const canvasWidthRatio = 0.9;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.height = winHeight * canvasHeightRatio;\n    canvas.width = winWidth * canvasWidthRatio;\n    const context = canvas.getContext('2d');\n    context.scale(1, 1);\n    context.lineCap = 'round';\n    context.lineWidth = 3;\n    contextRef.current = context;\n  }, [winWidth, winHeight]);\n\n  useEffect(() => {\n    socket.on('start draw', ({ x, y }) => {\n      if (!contextRef.current) return;\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(x, y);\n    });\n    socket.on('draw', (data) => {\n      if (!contextRef.current) return;\n      contextRef.current.lineTo(data.x, data.y);\n      contextRef.current.strokeStyle = data.color.hex;\n      contextRef.current.stroke();\n    });\n    socket.on('finish draw', () => {\n      if (!contextRef.current) return;\n      contextRef.current.closePath();\n    });\n    socket.on('clear', () => {\n      if (!contextRef.current) return;\n      contextRef.current.clearRect(\n        0,\n        0,\n        canvasRef.current.width,\n        canvasRef.current.height\n      );\n    });\n    socket.on('right answer', () => {\n      if (!contextRef.current) return;\n      contextRef.current.clearRect(\n        0,\n        0,\n        canvasRef.current.width,\n        canvasRef.current.height\n      );\n    });\n    socket.on('mode picked', () => {\n      if (!contextRef.current) return;\n      contextRef.current.clearRect(\n        0,\n        0,\n        canvasRef.current.width,\n        canvasRef.current.height\n      );\n    });\n  }, []);\n  const startDrawing = (e) => {\n    if (role === 'guess') return;\n    const rect = canvasRef.current.getBoundingClientRect();\n    const touch = e.touches[0];\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(touch.clientX - rect.x, touch.clientY - rect.y);\n    setIsDrawing(true);\n    socket.emit('start draw', {\n      x: touch.clientX - rect.x,\n      y: touch.clientY - rect.y,\n    });\n  };\n\n  const draw = (e) => {\n    if (!isDrawing) return;\n    if (role === 'guess') return;\n    const touch = e.touches[0];\n    const rect = canvasRef.current.getBoundingClientRect();\n    contextRef.current.strokeStyle = color.hex;\n    contextRef.current.lineTo(touch.clientX - rect.x, touch.clientY - rect.y);\n    contextRef.current.stroke();\n    socket.emit('draw', {\n      x: touch.clientX - rect.x,\n      y: touch.clientY - rect.y,\n      color,\n    });\n  };\n\n  const finishDrawing = () => {\n    if (role === 'guess') return;\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    socket.emit('finish draw');\n  };\n\n  // const startDrawing = (e) => {\n  //   if (role === 'guess') return;\n  //   const rect = canvasRef.current.getBoundingClientRect();\n  //   contextRef.current.beginPath();\n  //   contextRef.current.moveTo(e.clientX - rect.x, e.clientY - rect.y);\n  //   setIsDrawing(true);\n  //   socket.emit('start draw', {\n  //     x: e.clientX - rect.x,\n  //     y: e.clientY - rect.y,\n  //   });\n  // };\n\n  // const draw = (e) => {\n  //   if (!isDrawing) return;\n  //   if (role === 'guess') return;\n  //   const rect = canvasRef.current.getBoundingClientRect();\n  //   contextRef.current.strokeStyle = color.hex;\n  //   contextRef.current.lineTo(e.clientX - rect.x, e.clientY - rect.y);\n  //   contextRef.current.stroke();\n  //   socket.emit('draw', {\n  //     x: e.clientX - rect.x,\n  //     y: e.clientY - rect.y,\n  //     color,\n  //   });\n  // };\n\n  // const finishDrawing = () => {\n  //   if (role === 'guess') return;\n  //   contextRef.current.closePath();\n  //   setIsDrawing(false);\n  //   socket.emit('finish draw');\n  // };\n\n  const clear = () => {\n    contextRef.current.clearRect(\n      0,\n      0,\n      canvasRef.current.width,\n      canvasRef.current.height\n    );\n    socket.emit('clear');\n  };\n\n  const endGame = () => {\n    history.push('/end');\n    socket.emit('end game');\n  };\n\n  return (\n    <>\n      <div className='canvas' style={{ marginBottom: '20px' }}>\n        <canvas\n          id='canvas'\n          onMouseDown={startDrawing}\n          onMouseUp={finishDrawing}\n          onMouseMove={draw}\n          onTouchStart={startDrawing}\n          onTouchEnd={finishDrawing}\n          onTouchMove={draw}\n          ref={canvasRef}\n        />\n      </div>\n      {role === 'draw' ? (\n        <>\n          {' '}\n          <TwitterPicker color={color} onChange={setColor} />\n          <div className='gameButtons'>\n            <Button\n              variant='contained'\n              color='secondary'\n              startIcon={<AddIcon />}\n              style={{ marginTop: '20px' }}\n              onClick={() => setChangeWord(!changeWord)}\n            >\n              Generate New Word\n            </Button>\n            <Button\n              variant='contained'\n              color='secondary'\n              startIcon={<DeleteIcon />}\n              style={{ marginTop: '20px' }}\n              onClick={clear}\n            >\n              Clear Canvas\n            </Button>\n\n            <Tooltip\n              PopperProps={{\n                disablePortal: true,\n              }}\n              open={open}\n              onClose={() => setOpen(false)}\n              disableFocusListener\n              disableHoverListener\n              disableTouchListener\n              title='Score Submited'\n            >\n              <Button\n                variant='contained'\n                color='secondary'\n                className='endGame'\n                startIcon={<SentimentVeryDissatisfiedIcon />}\n                style={{ marginTop: '20px' }}\n                onClick={endGame}\n              >\n                End Game\n              </Button>\n            </Tooltip>\n          </div>{' '}\n        </>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default Canvas;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport Canvas from './Canvas';\nimport Typography from '@material-ui/core/Typography';\nimport { Button } from '@material-ui/core';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport TextField from '@material-ui/core/TextField';\nimport { socket } from '../socket/Socket';\nimport { useHistory } from 'react-router-dom';\n\nconst Main = ({ setWord, setScore }) => {\n  const { role, nickName, word, words, gameStatus, modePicked, mode, score } =\n    useContext(UserContext);\n  const [changeWord, setChangeWord] = useState(false);\n  const [guess, setGuess] = useState('');\n  const [secondUser, setSecondUser] = useState('');\n  const history = useHistory();\n  const scoreMap = {\n    easy: 1,\n    normal: 3,\n    hard: 5,\n  };\n  useEffect(() => {\n    // Generate random word\n    if (role === 'draw' && changeWord) {\n      const numberIndex = words.findIndex((currWord) => currWord === word);\n      const ind = numberIndex + 1 >= words.length ? 0 : numberIndex + 1;\n      const nextWord = words[ind];\n      setWord(nextWord);\n      socket.emit('clear');\n    }\n  }, [changeWord]);\n\n  useEffect(() => {\n    socket.on('check answer', (data) => {\n      if (data.guess === word.toLocaleLowerCase()) {\n        socket.emit('right answer', score + scoreMap[mode]);\n        setScore(score + scoreMap[mode]);\n        setChangeWord((prevState) => !prevState);\n        setSecondUser(data.nickName);\n      }\n    });\n    socket.on('end game', () => history.push('/end'));\n    return () => {\n      socket.off('check answer');\n      socket.off('end game');\n    };\n  }, [word]);\n\n  useEffect(() => {\n    socket.on('right answer', (score) => {\n      setChangeWord((prevState) => !prevState);\n      setScore(score);\n    });\n    socket.on('mode picked', () => setScore(0));\n    return () => {\n      socket.off('right answer');\n    };\n  }, []);\n\n  const handleGuess = () => {\n    socket.emit('check answer', { guess: guess.toLocaleLowerCase(), nickName });\n  };\n\n  return (\n    <div className='content'>\n      {gameStatus && modePicked ? (\n        <>\n          {role === 'draw' ? <h2>Draw - {word}</h2> : ''}\n          <h3 style={{ marginBottom: '10px' }}>Score : {score}</h3>\n          <Canvas\n            user2={secondUser}\n            score={score}\n            changeWord={changeWord}\n            setChangeWord={setChangeWord}\n          />\n        </>\n      ) : (\n        <div className='waiting'>\n          <AccessTimeIcon fontSize='large' />\n          <Typography paragraph align='center' variant='h2'>\n            Waiting For 2nd Player...\n          </Typography>\n          <AccessTimeIcon fontSize='large' />\n        </div>\n      )}\n      {role === 'guess' && gameStatus && modePicked ? (\n        <>\n          <TextField\n            onChange={(e) => setGuess(e.target.value)}\n            value={guess}\n            id='standard-basic'\n            label='Place Your Guess Here !'\n          />\n          <Button\n            onClick={handleGuess}\n            variant='contained'\n            color='secondary'\n            style={{ marginTop: '20px' }}\n          >\n            Submit Your Answer\n          </Button>\n        </>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useEffect, useContext } from 'react';\nimport { UserContext } from '../context/UserContext';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ChildFriendlyIcon from '@material-ui/icons/ChildFriendly';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport { useHistory } from 'react-router-dom';\nimport { socket } from '../socket/Socket';\nimport { URL_ENDPOINT } from '../URL.ENDPOINT';\n\nconst ModePick = ({ setModePicked, setWords, score, setMode }) => {\n  const history = useHistory();\n  const { mode } = useContext(UserContext);\n\n  useEffect(() => {\n    mode &&\n      (async () => {\n        try {\n          let res = await fetch(`${URL_ENDPOINT}/words/${mode}`);\n          let data = await res.json();\n          socket.emit('mode picked', score);\n          setModePicked(true);\n          setWords(data);\n          history.push('/choose-word');\n        } catch (error) {\n          throw error;\n        }\n      })();\n  }, [mode]);\n\n  return (\n    <div className='modePick'>\n      <Typography variant='h4' align='center' color='textPrimary'>\n        Pick Your Game Level :\n      </Typography>\n\n      <Typography variant='h5' align='center' color='textSecondary' paragraph>\n        EZ Mode Win - 1 Point <br />\n        Medium Mode Win - 3 Points <br />\n        Hard Mode Win - 5 Points\n      </Typography>\n      <div className='levelButtons'>\n        <Button\n          style={{ marginTop: '10px' }}\n          className='easy'\n          size='large'\n          startIcon={<ChildFriendlyIcon />}\n          variant='contained'\n          color='primary'\n          onClick={(e) => {\n            setMode('easy');\n          }}\n        >\n          Easy\n        </Button>\n        <Button\n          style={{ marginTop: '10px' }}\n          size='large'\n          variant='contained'\n          startIcon={<SentimentSatisfiedOutlinedIcon />}\n          color='primary'\n          onClick={(e) => {\n            setMode('normal');\n          }}\n        >\n          Medium\n        </Button>\n        <Button\n          style={{ marginTop: '10px' }}\n          className='hard'\n          size='large'\n          startIcon={<WarningIcon />}\n          variant='contained'\n          color='primary'\n          onClick={(e) => {\n            setMode('hard');\n          }}\n        >\n          Hard\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ModePick;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport BrushIcon from '@material-ui/icons/Brush';\n\nconst EndGame = () => {\n    return (\n        <div className=\"endContent\">\n            <BrushIcon fontSize=\"large\" />\n            <Typography\n                variant=\"h4\"\n                align=\"center\"\n                color=\"textPrimary\">\n                Thank You For Playing!\n            </Typography>\n            <BrushIcon fontSize=\"large\" />\n            <Typography\n                variant=\"h5\"\n                align=\"center\"\n                color=\"textSecondary\"\n                paragraph>\n                Hope you had fun :) <br />\n                See you soon!\n            </Typography>\n            <Typography\n                variant=\"h6\"\n                align=\"center\"\n                color=\"textPrimary\">\n                For a new game - refresh your browser\n            </Typography>\n        </div>\n    );\n};\n\nexport default EndGame;\n","import React, { useContext } from 'react';\r\nimport { UserContext } from '../context/UserContext';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Button } from '@material-ui/core';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst WordChoose = ({ setWord }) => {\r\n  const { words } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  const handleClick = (word) => {\r\n    setWord(word);\r\n    history.push('/main');\r\n  };\r\n  return (\r\n    <Container\r\n      component='main'\r\n      maxWidth='xs'\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        marginTop: '40px',\r\n      }}\r\n    >\r\n      <Typography component='h1' variant='h5'>\r\n        Choose Word\r\n      </Typography>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          marginTop: '10px',\r\n          gap: '10px',\r\n        }}\r\n      >\r\n        {words.map((word) => (\r\n          <Button\r\n            key={word}\r\n            type='submit'\r\n            variant='contained'\r\n            color='primary'\r\n            onClick={() => handleClick(word)}\r\n          >\r\n            {word}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WordChoose;\r\n","import './App.css';\nimport { ThemeProvider } from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport orange from '@material-ui/core/colors/orange';\nimport Header from './components/Header';\nimport { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Redirect, Route } from 'react-router-dom';\nimport SignIn from './components/SignIn';\nimport Main from './components/Main';\nimport { UserContext } from './context/UserContext';\nimport ModePick from './components/ModePick';\nimport { socket } from './socket/Socket';\nimport EndGame from './components/EndGame';\nimport WordChoose from './components/WordChoose';\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: blue[500],\n      },\n      secondary: {\n        main: orange[500],\n      },\n    },\n  });\n\n  useEffect(() => {\n    socket.on('connection', (data) => {\n      setRole(data.role);\n    });\n    socket.on('game full', () => {\n      setGameStatus(true);\n    });\n    socket.on('mode picked', () => {\n      setModePicked(true);\n    });\n  }, []);\n\n  const [fullName, setFullName] = useState('');\n  const [nickName, setNickName] = useState('');\n  const [role, setRole] = useState('');\n  const [gameStatus, setGameStatus] = useState(false);\n  const [words, setWords] = useState([]);\n  const [word, setWord] = useState([]);\n  const [mode, setMode] = useState('');\n  const [modePicked, setModePicked] = useState(false);\n  const [score, setScore] = useState(0);\n\n  return (\n    <Router>\n      <UserContext.Provider\n        value={{\n          fullName,\n          nickName,\n          setFullName,\n          setNickName,\n          role,\n          words,\n          word,\n          mode,\n          modePicked,\n          gameStatus,\n          score,\n        }}\n      >\n        <ThemeProvider theme={theme}>\n          <Header gameStatus={gameStatus} />\n          <Redirect to='/sign' />\n          <Route exact path='/'>\n            <Redirect to='/sign' />\n          </Route>\n          <Route\n            path='/choose-word'\n            component={() => <WordChoose setWord={setWord} />}\n          />\n          <Route path='/sign' component={() => <SignIn />} />\n          <Route\n            path='/mode'\n            component={() => (\n              <ModePick\n                setWords={setWords}\n                setModePicked={setModePicked}\n                setMode={setMode}\n              />\n            )}\n          />\n          <Route\n            path='/main'\n            component={() => <Main setWord={setWord} setScore={setScore} />}\n          />\n\n          <Route path='/end' component={EndGame} />\n        </ThemeProvider>\n      </UserContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}